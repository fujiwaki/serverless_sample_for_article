{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Serverless sample","text":""},{"location":"api/","title":"API","text":"<p>"},{"location":"reference/","title":"index","text":"<p>Lambda function entrypoint.</p>"},{"location":"reference/#index.handler","title":"<code>handler(event: dict[str, Any], context: LambdaContext) -&gt; dict[str, Any]</code>","text":"<p>Lambda function handler.</p> Source code in <code>src/index.py</code> <pre><code>@logger.inject_lambda_context(correlation_id_path=correlation_paths.API_GATEWAY_REST, log_event=True)\ndef handler(event: dict[str, Any], context: LambdaContext) -&gt; dict[str, Any]:\n    \"\"\"Lambda function handler.\"\"\"\n    app.append_context(container=container)  # type: ignore[no-untyped-call]\n    return app.resolve(event, context)\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>base<ul> <li>aws<ul> <li>dynamodb</li> <li>exceptions</li> </ul> </li> <li>components<ul> <li>application</li> <li>domain</li> </ul> </li> </ul> </li> <li>core<ul> <li>application<ul> <li>project</li> <li>task</li> </ul> </li> <li>config<ul> <li>container</li> </ul> </li> <li>domain<ul> <li>project</li> <li>repositories</li> <li>task</li> </ul> </li> <li>infrastructure<ul> <li>project</li> <li>table</li> <li>task</li> </ul> </li> </ul> </li> <li>index</li> <li>routers<ul> <li>models<ul> <li>project</li> <li>task</li> </ul> </li> <li>project</li> <li>task</li> </ul> </li> </ul>"},{"location":"reference/base/aws/","title":"aws","text":"<p>AWS base module.</p>"},{"location":"reference/base/aws/dynamodb/","title":"dynamodb","text":"<p>Base model for DynamoDB.</p>"},{"location":"reference/base/aws/dynamodb/#base.aws.dynamodb.Attribute","title":"<code>Attribute</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Attribute.</p>"},{"location":"reference/base/aws/dynamodb/#base.aws.dynamodb.AttributeType","title":"<code>AttributeType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Attribute type.</p>"},{"location":"reference/base/aws/dynamodb/#base.aws.dynamodb.BaseModel","title":"<code>BaseModel</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base model.</p>"},{"location":"reference/base/aws/dynamodb/#base.aws.dynamodb.Item","title":"<code>Item</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Item.</p>"},{"location":"reference/base/aws/dynamodb/#base.aws.dynamodb.KeySchema","title":"<code>KeySchema</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Key schema.</p>"},{"location":"reference/base/aws/dynamodb/#base.aws.dynamodb.Repository","title":"<code>Repository(table: Table, schema: TableSchema)</code>","text":"<p>               Bases: <code>Repository</code></p> <p>Base repository for DynamoDB.</p> <p>Initialize DynamoDBRepository.</p> Source code in <code>src/base/aws/dynamodb.py</code> <pre><code>def __init__(self, table: Table, schema: TableSchema) -&gt; None:\n    \"\"\"Initialize DynamoDBRepository.\"\"\"\n    self._table = table\n    self._schema = schema\n</code></pre>"},{"location":"reference/base/aws/dynamodb/#base.aws.dynamodb.TableSchema","title":"<code>TableSchema</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Table schema.</p>"},{"location":"reference/base/aws/exceptions/","title":"exceptions","text":"<p>Exceptions for aws module.</p>"},{"location":"reference/base/aws/exceptions/#base.aws.exceptions.ItemNotFoundError","title":"<code>ItemNotFoundError(item_type: type, hash_: TableAttributeValueTypeDef, range_: TableAttributeValueTypeDef | None = None)</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Item not found error.</p> <p>Initialize ItemNotFoundError.</p> Source code in <code>src/base/aws/exceptions.py</code> <pre><code>def __init__(\n    self, item_type: type, hash_: TableAttributeValueTypeDef, range_: TableAttributeValueTypeDef | None = None\n) -&gt; None:\n    \"\"\"Initialize ItemNotFoundError.\"\"\"\n    super().__init__(f\"Item {item_type}(hash: {hash_!s}, range: {range_!s}) was not found.\")\n</code></pre>"},{"location":"reference/base/aws/exceptions/#base.aws.exceptions.RangeKeyNotFoundError","title":"<code>RangeKeyNotFoundError()</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Range key not found error.</p> <p>Initialize RangeKeyNotFoundError.</p> Source code in <code>src/base/aws/exceptions.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize RangeKeyNotFoundError.\"\"\"\n    super().__init__(\"Range key was not found.\")\n</code></pre>"},{"location":"reference/base/components/","title":"components","text":"<p>Base components module.</p>"},{"location":"reference/base/components/application/","title":"application","text":"<p>Components for application layer.</p>"},{"location":"reference/base/components/application/#base.components.application.Command","title":"<code>Command</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base class for commands.</p>"},{"location":"reference/base/components/application/#base.components.application.DTO","title":"<code>DTO</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base class for DTOs.</p>"},{"location":"reference/base/components/application/#base.components.application.Service","title":"<code>Service</code>","text":"<p>Base class for services.</p>"},{"location":"reference/base/components/domain/","title":"domain","text":"<p>Components for domain layer.</p>"},{"location":"reference/base/components/domain/#base.components.domain.Entity","title":"<code>Entity</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base class for entities.</p>"},{"location":"reference/base/components/domain/#base.components.domain.EntityId","title":"<code>EntityId</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Entity ID class.</p>"},{"location":"reference/base/components/domain/#base.components.domain.EntityId.__hash__","title":"<code>__hash__() -&gt; int</code>","text":"<p>Return the hash value.</p> Source code in <code>src/base/components/domain.py</code> <pre><code>def __hash__(self) -&gt; int:\n    \"\"\"Return the hash value.\"\"\"\n    return hash(self.__str__())\n</code></pre>"},{"location":"reference/base/components/domain/#base.components.domain.EntityId.__str__","title":"<code>__str__() -&gt; str</code>","text":"<p>Return the string representation.</p> Source code in <code>src/base/components/domain.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the string representation.\"\"\"\n    return str(self.value)\n</code></pre>"},{"location":"reference/base/components/domain/#base.components.domain.Repository","title":"<code>Repository</code>","text":"<p>Base class for repositories.</p>"},{"location":"reference/base/components/domain/#base.components.domain.ValueObject","title":"<code>ValueObject</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base class for value objects.</p>"},{"location":"reference/core/","title":"core","text":"<p>Core module.</p>"},{"location":"reference/core/application/","title":"application","text":"<p>Application module.</p>"},{"location":"reference/core/application/project/","title":"project","text":"<p>Project application service.</p>"},{"location":"reference/core/application/project/#core.application.project.CreateProjectCommand","title":"<code>CreateProjectCommand</code>","text":"<p>               Bases: <code>Command</code></p> <p>Create project command.</p> <p>Attributes:</p> Name Type Description <code>title</code> <code>str</code> <p>Project title.</p>"},{"location":"reference/core/application/project/#core.application.project.GetProjectCommand","title":"<code>GetProjectCommand</code>","text":"<p>               Bases: <code>Command</code></p> <p>Get project command.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Project ID.</p>"},{"location":"reference/core/application/project/#core.application.project.ProjectDTO","title":"<code>ProjectDTO</code>","text":"<p>               Bases: <code>DTO</code></p> <p>Project DTO.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Project ID.</p> <code>title</code> <code>str</code> <p>Project title.</p> <code>tasks</code> <code>list[TaskDTO]</code> <p>Tasks of the project.</p>"},{"location":"reference/core/application/project/#core.application.project.ProjectDTO.from_entity","title":"<code>from_entity(project: Project, tasks: list[Task]) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Create a DTO from an entity.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>Project</code> <p>Project entity.</p> required <code>tasks</code> <code>list[Task]</code> <p>Tasks of the project.</p> required Source code in <code>src/core/application/project.py</code> <pre><code>@classmethod\ndef from_entity(cls, project: Project, tasks: list[Task]) -&gt; Self:\n    \"\"\"Create a DTO from an entity.\n\n    Args:\n        project: Project entity.\n        tasks: Tasks of the project.\n    \"\"\"\n    task_dtos = [TaskDTO.from_entity(task) for task in tasks]\n    return cls(id=str(project.id), title=project.title, tasks=task_dtos)\n</code></pre>"},{"location":"reference/core/application/project/#core.application.project.ProjectService","title":"<code>ProjectService(project_repository: ProjectRepository, task_repository: TaskRepository)</code>","text":"<p>               Bases: <code>Service</code></p> <p>Project service.</p> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>project_repository</code> <code>ProjectRepository</code> <p>Project repository.</p> required <code>task_repository</code> <code>TaskRepository</code> <p>Task repository.</p> required Source code in <code>src/core/application/project.py</code> <pre><code>def __init__(self, project_repository: ProjectRepository, task_repository: TaskRepository) -&gt; None:\n    \"\"\"Constructor.\n\n    Args:\n        project_repository: Project repository.\n        task_repository: Task repository.\n    \"\"\"\n    self._project_repository = project_repository\n    self._task_repository = task_repository\n</code></pre>"},{"location":"reference/core/application/project/#core.application.project.ProjectService.create","title":"<code>create(command: CreateProjectCommand) -&gt; ProjectDTO</code>","text":"<p>Create a project.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>CreateProjectCommand</code> <p>Command to create a project.</p> required Source code in <code>src/core/application/project.py</code> <pre><code>def create(self, command: CreateProjectCommand) -&gt; ProjectDTO:\n    \"\"\"Create a project.\n\n    Args:\n        command: Command to create a project.\n    \"\"\"\n    project = Project(title=command.title)\n    self._project_repository.save(project)\n    return ProjectDTO.from_entity(project, [])\n</code></pre>"},{"location":"reference/core/application/project/#core.application.project.ProjectService.get","title":"<code>get(command: GetProjectCommand) -&gt; ProjectDTO</code>","text":"<p>Get a project.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>GetProjectCommand</code> <p>Command to get a project.</p> required Source code in <code>src/core/application/project.py</code> <pre><code>def get(self, command: GetProjectCommand) -&gt; ProjectDTO:\n    \"\"\"Get a project.\n\n    Args:\n        command: Command to get a project.\n    \"\"\"\n    project = self._project_repository.get(EntityId(value=command.id))\n    tasks = self._task_repository.get_by_project_id(EntityId(value=command.id))\n    return ProjectDTO.from_entity(project, tasks)\n</code></pre>"},{"location":"reference/core/application/task/","title":"task","text":"<p>Task application service.</p>"},{"location":"reference/core/application/task/#core.application.task.CreateTaskCommand","title":"<code>CreateTaskCommand</code>","text":"<p>               Bases: <code>Command</code></p> <p>Create task command.</p> <p>Attributes:</p> Name Type Description <code>project_id</code> <code>str</code> <p>Project ID that the task belongs to.</p> <code>title</code> <code>str</code> <p>Task title.</p> <code>description</code> <code>str</code> <p>Task description.</p>"},{"location":"reference/core/application/task/#core.application.task.TaskDTO","title":"<code>TaskDTO</code>","text":"<p>               Bases: <code>DTO</code></p> <p>Task DTO.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Task ID.</p> <code>project_id</code> <code>str</code> <p>Project ID that the task belongs to.</p> <code>title</code> <code>str</code> <p>Task title.</p> <code>description</code> <code>str</code> <p>Task description.</p>"},{"location":"reference/core/application/task/#core.application.task.TaskDTO.from_entity","title":"<code>from_entity(entity: Task) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Create a DTO from an entity.</p> <p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Task</code> <p>Task entity.</p> required Source code in <code>src/core/application/task.py</code> <pre><code>@classmethod\ndef from_entity(cls, entity: Task) -&gt; Self:\n    \"\"\"Create a DTO from an entity.\n\n    Args:\n        entity: Task entity.\n    \"\"\"\n    return cls(\n        id=str(entity.id), project_id=str(entity.project_id), title=entity.title, description=entity.description\n    )\n</code></pre>"},{"location":"reference/core/application/task/#core.application.task.TaskService","title":"<code>TaskService(task_repository: TaskRepository)</code>","text":"<p>               Bases: <code>Service</code></p> <p>Task service.</p> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>task_repository</code> <code>TaskRepository</code> <p>Task repository</p> required Source code in <code>src/core/application/task.py</code> <pre><code>def __init__(self, task_repository: TaskRepository) -&gt; None:\n    \"\"\"Constructor.\n\n    Args:\n        task_repository: Task repository\n    \"\"\"\n    self._task_repository = task_repository\n</code></pre>"},{"location":"reference/core/application/task/#core.application.task.TaskService.create","title":"<code>create(command: CreateTaskCommand) -&gt; TaskDTO</code>","text":"<p>Create a project.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>CreateTaskCommand</code> <p>Create task command.</p> required Source code in <code>src/core/application/task.py</code> <pre><code>def create(self, command: CreateTaskCommand) -&gt; TaskDTO:\n    \"\"\"Create a project.\n\n    Args:\n        command: Create task command.\n    \"\"\"\n    task = Task(project_id=EntityId(value=command.project_id), title=command.title, description=command.description)\n    self._task_repository.save(task)\n    return TaskDTO.from_entity(task)\n</code></pre>"},{"location":"reference/core/config/","title":"config","text":"<p>Config module.</p>"},{"location":"reference/core/config/container/","title":"container","text":"<p>DI Container.</p>"},{"location":"reference/core/config/container/#core.config.container.Container","title":"<code>Container(table_name: str)</code>","text":"<p>DI Container.</p> <p>Constructor.</p> Source code in <code>src/core/config/container.py</code> <pre><code>def __init__(self, table_name: str) -&gt; None:\n    \"\"\"Constructor.\"\"\"\n    self._table_name = table_name\n</code></pre>"},{"location":"reference/core/config/container/#core.config.container.Container.project_repository","title":"<code>project_repository: ProjectRepository</code>  <code>property</code>","text":"<p>The project repository.</p>"},{"location":"reference/core/config/container/#core.config.container.Container.project_service","title":"<code>project_service: ProjectService</code>  <code>property</code>","text":"<p>The project service.</p>"},{"location":"reference/core/config/container/#core.config.container.Container.table","title":"<code>table: Table</code>  <code>property</code>","text":"<p>The DynamoDB table instance.</p>"},{"location":"reference/core/config/container/#core.config.container.Container.task_repository","title":"<code>task_repository: TaskRepository</code>  <code>property</code>","text":"<p>The task repository.</p>"},{"location":"reference/core/config/container/#core.config.container.Container.task_service","title":"<code>task_service: TaskService</code>  <code>property</code>","text":"<p>The task service.</p>"},{"location":"reference/core/domain/","title":"domain","text":"<p>Domain module.</p>"},{"location":"reference/core/domain/project/","title":"project","text":"<p>Project model.</p>"},{"location":"reference/core/domain/project/#core.domain.project.Project","title":"<code>Project</code>","text":"<p>               Bases: <code>Entity</code></p> <p>Project Entity.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>EntityId</code> <p>Project ID.</p> <code>title</code> <code>str</code> <p>Project title.</p>"},{"location":"reference/core/domain/repositories/","title":"repositories","text":"<p>Repository interfaces.</p>"},{"location":"reference/core/domain/repositories/#core.domain.repositories.ProjectRepository","title":"<code>ProjectRepository</code>","text":"<p>               Bases: <code>Repository</code>, <code>ABC</code></p> <p>Project repository interface.</p>"},{"location":"reference/core/domain/repositories/#core.domain.repositories.ProjectRepository.get","title":"<code>get(project_id: EntityId) -&gt; Project</code>  <code>abstractmethod</code>","text":"<p>Get a project.</p> Source code in <code>src/core/domain/repositories.py</code> <pre><code>@abstractmethod\ndef get(self, project_id: EntityId) -&gt; Project:\n    \"\"\"Get a project.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/core/domain/repositories/#core.domain.repositories.ProjectRepository.save","title":"<code>save(project: Project) -&gt; None</code>  <code>abstractmethod</code>","text":"<p>Save a project.</p> Source code in <code>src/core/domain/repositories.py</code> <pre><code>@abstractmethod\ndef save(self, project: Project) -&gt; None:\n    \"\"\"Save a project.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/core/domain/repositories/#core.domain.repositories.TaskRepository","title":"<code>TaskRepository</code>","text":"<p>               Bases: <code>Repository</code>, <code>ABC</code></p> <p>Task repository interface.</p>"},{"location":"reference/core/domain/repositories/#core.domain.repositories.TaskRepository.get_by_project_id","title":"<code>get_by_project_id(project_id: EntityId) -&gt; list[Task]</code>  <code>abstractmethod</code>","text":"<p>Get tasks by project ID.</p> Source code in <code>src/core/domain/repositories.py</code> <pre><code>@abstractmethod\ndef get_by_project_id(self, project_id: EntityId) -&gt; list[Task]:\n    \"\"\"Get tasks by project ID.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/core/domain/repositories/#core.domain.repositories.TaskRepository.save","title":"<code>save(task: Task) -&gt; None</code>  <code>abstractmethod</code>","text":"<p>Save a task.</p> Source code in <code>src/core/domain/repositories.py</code> <pre><code>@abstractmethod\ndef save(self, task: Task) -&gt; None:\n    \"\"\"Save a task.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/core/domain/task/","title":"task","text":"<p>Task model.</p>"},{"location":"reference/core/domain/task/#core.domain.task.Task","title":"<code>Task</code>","text":"<p>               Bases: <code>Entity</code></p> <p>Task Entity.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>EntityId</code> <p>Task ID.</p> <code>project_id</code> <code>EntityId</code> <p>Project ID that the task belongs to.</p> <code>title</code> <code>str</code> <p>Task title.</p> <code>description</code> <code>str</code> <p>Task description.</p>"},{"location":"reference/core/infrastructure/","title":"infrastructure","text":"<p>Infrastructure module.</p>"},{"location":"reference/core/infrastructure/project/","title":"project","text":"<p>Project infrastructure.</p>"},{"location":"reference/core/infrastructure/project/#core.infrastructure.project.ProjectItem","title":"<code>ProjectItem</code>","text":"<p>               Bases: <code>Item</code></p> <p>Project item for DynamoDB.</p> <p>Attributes:</p> Name Type Description <code>project_id</code> <code>str</code> <p>Project ID.</p> <code>item_name</code> <code>str</code> <p>Item name.</p> <code>title</code> <code>str</code> <p>Project title.</p>"},{"location":"reference/core/infrastructure/project/#core.infrastructure.project.ProjectItem.from_entity","title":"<code>from_entity(entity: Project) -&gt; ProjectItem</code>  <code>classmethod</code>","text":"<p>Create an item from an entity.</p> <p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Project</code> <p>Project entity.</p> required Source code in <code>src/core/infrastructure/project.py</code> <pre><code>@classmethod\ndef from_entity(cls, entity: Project) -&gt; ProjectItem:\n    \"\"\"Create an item from an entity.\n\n    Args:\n        entity: Project entity.\n    \"\"\"\n    return cls(project_id=str(entity.id), title=entity.title)\n</code></pre>"},{"location":"reference/core/infrastructure/project/#core.infrastructure.project.ProjectItem.to_entity","title":"<code>to_entity() -&gt; Project</code>","text":"<p>Create an entity from an item.</p> Source code in <code>src/core/infrastructure/project.py</code> <pre><code>def to_entity(self) -&gt; Project:\n    \"\"\"Create an entity from an item.\"\"\"\n    return Project(id=EntityId(value=self.project_id), title=self.title)\n</code></pre>"},{"location":"reference/core/infrastructure/project/#core.infrastructure.project.ProjectRepository","title":"<code>ProjectRepository(table: Table)</code>","text":"<p>               Bases: <code>ProjectRepository</code>, <code>Repository</code></p> <p>Project repository implementation.</p> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>Table</code> <p>DynamoDB table.</p> required Source code in <code>src/core/infrastructure/project.py</code> <pre><code>def __init__(self, table: Table) -&gt; None:\n    \"\"\"Constructor.\n\n    Args:\n        table: DynamoDB table.\n    \"\"\"\n    super().__init__(table, table_schema)\n</code></pre>"},{"location":"reference/core/infrastructure/project/#core.infrastructure.project.ProjectRepository.get","title":"<code>get(project_id: EntityId) -&gt; Project</code>","text":"<p>Get a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>EntityId</code> <p>Project ID.</p> required Source code in <code>src/core/infrastructure/project.py</code> <pre><code>def get(self, project_id: EntityId) -&gt; Project:\n    \"\"\"Get a project.\n\n    Args:\n        project_id: Project ID.\n    \"\"\"\n    item = self._get(ProjectItem, hash_=str(project_id), range_=\"Project\")\n    return item.to_entity()\n</code></pre>"},{"location":"reference/core/infrastructure/project/#core.infrastructure.project.ProjectRepository.save","title":"<code>save(project: Project) -&gt; None</code>","text":"<p>Save a project.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>Project</code> <p>Project.</p> required Source code in <code>src/core/infrastructure/project.py</code> <pre><code>def save(self, project: Project) -&gt; None:\n    \"\"\"Save a project.\n\n    Args:\n        project: Project.\n    \"\"\"\n    item = ProjectItem.from_entity(project)\n    self._put(item=item)\n</code></pre>"},{"location":"reference/core/infrastructure/table/","title":"table","text":"<p>Table configuration.</p>"},{"location":"reference/core/infrastructure/task/","title":"task","text":"<p>Task infrastructure.</p>"},{"location":"reference/core/infrastructure/task/#core.infrastructure.task.TaskItem","title":"<code>TaskItem</code>","text":"<p>               Bases: <code>Item</code></p> <p>Task item for DynamoDB.</p> <p>Attributes:</p> Name Type Description <code>project_id</code> <code>str</code> <p>Project ID.</p> <code>item_name</code> <code>str</code> <p>Item name.</p> <code>title</code> <code>str</code> <p>Task title.</p> <code>description</code> <code>str</code> <p>Task description.</p>"},{"location":"reference/core/infrastructure/task/#core.infrastructure.task.TaskItem.from_entity","title":"<code>from_entity(entity: Task) -&gt; TaskItem</code>  <code>classmethod</code>","text":"<p>Create an item from an entity.</p> <p>Parameters:</p> Name Type Description Default <code>entity</code> <code>Task</code> <p>Task entity.</p> required Source code in <code>src/core/infrastructure/task.py</code> <pre><code>@classmethod\ndef from_entity(cls, entity: Task) -&gt; TaskItem:\n    \"\"\"Create an item from an entity.\n\n    Args:\n        entity: Task entity.\n    \"\"\"\n    return cls(\n        project_id=str(entity.project_id),\n        item_name=f\"Task#{entity.id}\",\n        title=entity.title,\n        description=entity.description,\n    )\n</code></pre>"},{"location":"reference/core/infrastructure/task/#core.infrastructure.task.TaskItem.to_entity","title":"<code>to_entity() -&gt; Task</code>","text":"<p>Create an entity from an item.</p> Source code in <code>src/core/infrastructure/task.py</code> <pre><code>def to_entity(self) -&gt; Task:\n    \"\"\"Create an entity from an item.\"\"\"\n    return Task(\n        id=EntityId(value=self.item_name.removeprefix(\"Task#\")),\n        project_id=EntityId(value=self.project_id),\n        title=self.title,\n        description=self.description,\n    )\n</code></pre>"},{"location":"reference/core/infrastructure/task/#core.infrastructure.task.TaskRepository","title":"<code>TaskRepository(table: Table)</code>","text":"<p>               Bases: <code>TaskRepository</code>, <code>Repository</code></p> <p>Task repository implementation.</p> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>Table</code> <p>DynamoDB table.</p> required Source code in <code>src/core/infrastructure/task.py</code> <pre><code>def __init__(self, table: Table) -&gt; None:\n    \"\"\"Constructor.\n\n    Args:\n        table: DynamoDB table.\n    \"\"\"\n    super().__init__(table, table_schema)\n</code></pre>"},{"location":"reference/core/infrastructure/task/#core.infrastructure.task.TaskRepository.get_by_project_id","title":"<code>get_by_project_id(project_id: EntityId) -&gt; list[Task]</code>","text":"<p>Get tasks.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>EntityId</code> <p>Project ID.</p> required Source code in <code>src/core/infrastructure/task.py</code> <pre><code>def get_by_project_id(self, project_id: EntityId) -&gt; list[Task]:\n    \"\"\"Get tasks.\n\n    Args:\n        project_id: Project ID.\n    \"\"\"\n    items = self._query(TaskItem, hash_=str(project_id), range_=self._range_key().begins_with(\"Task#\"))\n    return [item.to_entity() for item in items]\n</code></pre>"},{"location":"reference/core/infrastructure/task/#core.infrastructure.task.TaskRepository.save","title":"<code>save(task: Task) -&gt; None</code>","text":"<p>Save a task.</p> <p>Parameters:</p> Name Type Description Default <code>task</code> <code>Task</code> <p>Task.</p> required Source code in <code>src/core/infrastructure/task.py</code> <pre><code>def save(self, task: Task) -&gt; None:\n    \"\"\"Save a task.\n\n    Args:\n        task: Task.\n    \"\"\"\n    item = TaskItem.from_entity(task)\n    self._put(item=item)\n</code></pre>"},{"location":"reference/routers/","title":"routers","text":"<p>Routers module.</p>"},{"location":"reference/routers/project/","title":"project","text":"<p>Project router.</p>"},{"location":"reference/routers/project/#routers.project.get_project","title":"<code>get_project(project_id: str) -&gt; ProjectResponse</code>","text":"<p>GET /projects/{project_id} handler.</p> Source code in <code>src/routers/project.py</code> <pre><code>@router.get(\"/&lt;project_id&gt;\")  # type: ignore[misc]\ndef get_project(project_id: str) -&gt; ProjectResponse:\n    \"\"\"GET /projects/{project_id} handler.\"\"\"\n    container: Container = router.context[\"container\"]\n    command = GetProjectCommand(id=project_id)\n    project = container.project_service.get(command)\n    return ProjectResponse.from_dto(project)\n</code></pre>"},{"location":"reference/routers/project/#routers.project.post_project","title":"<code>post_project(request: NewProjectRequest) -&gt; Response[ProjectResponse]</code>","text":"<p>POST /projects handler.</p> Source code in <code>src/routers/project.py</code> <pre><code>@router.post(\"/\")  # type: ignore[misc]\ndef post_project(request: NewProjectRequest) -&gt; Response[ProjectResponse]:\n    \"\"\"POST /projects handler.\"\"\"\n    container: Container = router.context[\"container\"]\n    command = CreateProjectCommand(title=request.title)\n    project = container.project_service.create(command)\n    return Response(status_code=HTTPStatus.CREATED.value, body=ProjectResponse.from_dto(project).model_dump_json())  # type: ignore[arg-type]\n</code></pre>"},{"location":"reference/routers/task/","title":"task","text":"<p>Task router.</p>"},{"location":"reference/routers/task/#routers.task.post_task","title":"<code>post_task(project_id: str, request: NewTaskRequest) -&gt; Response[TaskResponse]</code>","text":"<p>POST /projects//tasks handler. Source code in <code>src/routers/task.py</code> <pre><code>@router.post(\"/\")  # type: ignore[misc]\ndef post_task(project_id: str, request: NewTaskRequest) -&gt; Response[TaskResponse]:\n    \"\"\"POST /projects/&lt;project_id&gt;/tasks handler.\"\"\"\n    container: Container = router.context[\"container\"]\n    command = CreateTaskCommand(project_id=project_id, title=request.title, description=request.description)\n    task = container.task_service.create(command)\n    return Response(status_code=HTTPStatus.CREATED.value, body=TaskResponse.from_dto(task).model_dump_json())  # type: ignore[arg-type]\n</code></pre>"},{"location":"reference/routers/models/","title":"models","text":"<p>Models for API.</p>"},{"location":"reference/routers/models/project/","title":"project","text":"<p>Project model.</p>"},{"location":"reference/routers/models/project/#routers.models.project.NewProjectRequest","title":"<code>NewProjectRequest</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Request model for creating a new project.</p>"},{"location":"reference/routers/models/project/#routers.models.project.ProjectResponse","title":"<code>ProjectResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response model for a post.</p>"},{"location":"reference/routers/models/project/#routers.models.project.ProjectResponse.from_dto","title":"<code>from_dto(dto: ProjectDTO) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Converts a DTO to a response model.</p> Source code in <code>src/routers/models/project.py</code> <pre><code>@classmethod\ndef from_dto(cls, dto: ProjectDTO) -&gt; Self:\n    \"\"\"Converts a DTO to a response model.\"\"\"\n    tasks = [ProjectResponseTask.from_dto(task) for task in dto.tasks]\n    return cls(id=dto.id, title=dto.title, tasks=tasks)\n</code></pre>"},{"location":"reference/routers/models/project/#routers.models.project.ProjectResponseTask","title":"<code>ProjectResponseTask</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response model for a task in a project.</p>"},{"location":"reference/routers/models/project/#routers.models.project.ProjectResponseTask.from_dto","title":"<code>from_dto(dto: TaskDTO) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Converts a DTO to a response model.</p> Source code in <code>src/routers/models/project.py</code> <pre><code>@classmethod\ndef from_dto(cls, dto: TaskDTO) -&gt; Self:\n    \"\"\"Converts a DTO to a response model.\"\"\"\n    return cls(id=dto.id, title=dto.title, description=dto.description)\n</code></pre>"},{"location":"reference/routers/models/task/","title":"task","text":"<p>Task model.</p>"},{"location":"reference/routers/models/task/#routers.models.task.NewTaskRequest","title":"<code>NewTaskRequest</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Request model for creating a new task.</p>"},{"location":"reference/routers/models/task/#routers.models.task.TaskResponse","title":"<code>TaskResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response model for a post.</p>"},{"location":"reference/routers/models/task/#routers.models.task.TaskResponse.from_dto","title":"<code>from_dto(dto: TaskDTO) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Converts a DTO to a response model.</p> Source code in <code>src/routers/models/task.py</code> <pre><code>@classmethod\ndef from_dto(cls, dto: TaskDTO) -&gt; Self:\n    \"\"\"Converts a DTO to a response model.\"\"\"\n    return cls(id=dto.id, project_id=dto.project_id, title=dto.title, description=dto.description)\n</code></pre>"},{"location":"coverage/","title":"Test Coverage","text":""}]}